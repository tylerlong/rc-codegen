{% if definition.with_import %}
import Foundation
import ObjectMapper
{% endif %}

open class {{ definition.name }}: Mappable {

  {% for field in definition.fields %}
    /*
    {{ field.description }}
    */
    open var `{{ field.name }}`: {{ field.type }}?
  {% endfor %}

  public init() {
  }

  required public init?(map: Map) {
  }

  convenience public init({% for field in definition.fields %}{% if loop.index != 1 %}, {% endif %}{{ field.name }}: {{ field.type }}? = nil{% endfor %}) {
    self.init()
    {% for field in definition.fields %}
      self.{{ field.name }} = `{{ field.name }}`
    {% endfor %}
  }

  open func mapping(map: Map) {
    {% for field in definition.fields %}
      {% if (field.name == 'id' or field.name == 'extensionId') and field.type == 'String' %}
        `{{ field.name }}` <- (map["{{ field.name }}"], StringTransform())
      {% else %}
        `{{ field.name }}` <- map["{{ field.name }}"]
      {% endif %}
    {% endfor %}
  }

}
